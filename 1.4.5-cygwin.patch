--- origsrc/xapian-core-1.4.5/api/omenquire.cc	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/api/omenquire.cc	2017-11-26 13:39:47.227016900 -0600
@@ -22,6 +22,7 @@
  * USA
  */
 
+#define _GNU_SOURCE /* exp10 */
 #include <config.h>
 #include "xapian/enquire.h"
 
--- origsrc/xapian-core-1.4.5/backends/flint_lock.cc	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/backends/flint_lock.cc	2017-11-26 13:14:40.748751900 -0600
@@ -40,11 +40,6 @@
 #include "errno_to_string.h"
 #include "omassert.h"
 
-#ifdef __CYGWIN__
-# include <cygwin/version.h>
-# include <sys/cygwin.h>
-#endif
-
 #ifdef FLINTLOCK_USE_FLOCK
 # include <sys/file.h>
 #endif
@@ -66,7 +61,7 @@ using namespace std;
 bool
 FlintLock::test() const
 {
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     if (hFile != INVALID_HANDLE_VALUE) return true;
     // Doesn't seem to be possible to check if the lock is held without briefly
     // taking the lock.
@@ -112,7 +107,7 @@ FlintLock::lock(bool exclusive, bool wai
     // Currently we only support exclusive locks.
     (void)exclusive;
     Assert(exclusive);
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     Assert(hFile == INVALID_HANDLE_VALUE);
 #ifdef __CYGWIN__
     char fnm[MAX_PATH];
@@ -442,7 +437,7 @@ no_ofd_support:
 
 void
 FlintLock::release() {
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     if (hFile == INVALID_HANDLE_VALUE) return;
     CloseHandle(hFile);
     hFile = INVALID_HANDLE_VALUE;
--- origsrc/xapian-core-1.4.5/backends/flint_lock.h	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/backends/flint_lock.h	2017-11-26 13:15:02.123815800 -0600
@@ -24,7 +24,7 @@
 
 #include <string>
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 # include "safewindows.h"
 #else
 # include <sys/types.h>
@@ -34,7 +34,7 @@
 
 class FlintLock {
     std::string filename;
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     HANDLE hFile;
 #elif defined FLINTLOCK_USE_FLOCK
     int fd;
@@ -51,7 +51,7 @@ class FlintLock {
 	FDLIMIT, // Process hit its file descriptor limit.
 	UNKNOWN // The attempt failed for some unspecified reason.
     } reason;
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     explicit FlintLock(const std::string &filename_)
 	: filename(filename_), hFile(INVALID_HANDLE_VALUE) {
 	// Keep the same lockfile name as flint since the locking is
--- origsrc/xapian-core-1.4.5/common/safeuuid.h	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/common/safeuuid.h	2017-11-26 13:16:19.960920200 -0600
@@ -22,7 +22,7 @@
 #ifndef XAPIAN_INCLUDED_SAFEUUID_H
 #define XAPIAN_INCLUDED_SAFEUUID_H
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 # include "common/win32_uuid.h"
 #elif defined HAVE_UUID_UUID_H
 # include <uuid/uuid.h>
--- origsrc/xapian-core-1.4.5/common/safewindows.h	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/common/safewindows.h	2017-11-26 13:16:30.789073600 -0600
@@ -22,7 +22,7 @@
 #ifndef XAPIAN_INCLUDED_SAFEWINDOWS_H
 #define XAPIAN_INCLUDED_SAFEWINDOWS_H
 
-#if !defined __CYGWIN__ && !defined __WIN32__
+#if !defined __WIN32__
 # error Including safewindows.h, but neither __CYGWIN__ nor __WIN32__ defined!
 #endif
 
--- origsrc/xapian-core-1.4.5/common/win32_uuid.h	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/common/win32_uuid.h	2017-11-26 13:16:44.132864300 -0600
@@ -21,7 +21,7 @@
 #ifndef XAPIAN_INCLUDED_WIN32_UUID_H
 #define XAPIAN_INCLUDED_WIN32_UUID_H
 
-#if !defined __CYGWIN__ && !defined __WIN32__
+#if !defined __WIN32__
 # error Including win32_uuid.h, but neither __CYGWIN__ nor __WIN32__ defined!
 #endif
 
--- origsrc/xapian-core-1.4.5/configure.ac	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/configure.ac	2017-11-26 13:32:06.308361800 -0600
@@ -809,7 +809,7 @@ case $enable_backend_chert$enable_backen
   dnl Find the UUID library (from e2fsprogs/util-linux-ng, not the OSSP one).
 
   case $host_os in
-    *mingw* | *cygwin*) dnl Use built-in API.
+    *mingw*) dnl Use built-in API.
       use_win32_uuid_api=1
       ;;
     *)
@@ -1344,6 +1344,7 @@ AC_SUBST([link_all_deplibs_CXX])
 dnl Shared library extension.
 module=no
 eval "SHLIBEXT=$shrext_cmds"
+case $host_os in cygwin*|mingw*) SHLIBEXT=.dll.a ;; esac
 AC_SUBST([SHLIBEXT])
 
 dnl We want to be able to use GNU make % pattern rules in maintainer targets
--- origsrc/xapian-core-1.4.5/net/tcpserver.cc	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/net/tcpserver.cc	2017-11-26 13:17:56.913738800 -0600
@@ -74,11 +74,11 @@ using namespace std;
 TcpServer::TcpServer(const std::string & host, int port, bool tcp_nodelay,
 		     bool verbose_)
     :
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
       mutex(NULL),
 #endif
       listen_socket(get_listening_socket(host, port, tcp_nodelay
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 					 , mutex
 #endif
 					 )),
@@ -89,7 +89,7 @@ TcpServer::TcpServer(const std::string &
 int
 TcpServer::get_listening_socket(const std::string & host, int port,
 				bool tcp_nodelay
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 				, HANDLE &mutex
 #endif
 				)
@@ -123,7 +123,7 @@ TcpServer::get_listening_socket(const st
 	}
 
 	int optval = 1;
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 	// Windows has screwy semantics for SO_REUSEADDR - it allows the user
 	// to bind to a port which is already bound and listening!  That's
 	// just not suitable as we don't want multiple processes listening on
@@ -274,7 +274,7 @@ TcpServer::accept_connection()
 TcpServer::~TcpServer()
 {
     CLOSESOCKET(listen_socket);
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     if (mutex) CloseHandle(mutex);
 #endif
 }
--- origsrc/xapian-core-1.4.5/net/tcpserver.h	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/net/tcpserver.h	2017-11-26 13:18:14.601289900 -0600
@@ -28,7 +28,7 @@
 # define SOCKET_INITIALIZER_MIXIN
 #endif
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 # include "safewindows.h" // Only for HANDLE!
 #endif
 
@@ -47,7 +47,7 @@ class XAPIAN_VISIBILITY_DEFAULT TcpServe
     /// Don't allow copying.
     TcpServer(const TcpServer &);
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     /// Mutex to stop two TcpServers running on the same port.
     HANDLE mutex;
 #endif
@@ -64,7 +64,7 @@ class XAPIAN_VISIBILITY_DEFAULT TcpServe
      */
     static int get_listening_socket(const std::string & host, int port,
 				    bool tcp_nodelay
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 				    , HANDLE &mutex
 #endif
 	    );
--- origsrc/xapian-core-1.4.5/tests/api_backend.cc	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/tests/api_backend.cc	2017-11-26 13:18:38.726364200 -0600
@@ -52,7 +52,7 @@ using namespace std;
 
 /// Regression test - lockfile should honour umask, was only user-readable.
 DEFINE_TESTCASE(lockfileumask1, chert || glass) {
-#if !defined __WIN32__ && !defined __CYGWIN__ && !defined __OS2__
+#if !defined __WIN32__ && !defined __OS2__
     mode_t old_umask = umask(022);
     try {
 	Xapian::WritableDatabase db = get_named_writable_database("lockfileumask1");
@@ -275,7 +275,7 @@ DEFINE_TESTCASE(valuesaftercommit1, writ
 }
 
 DEFINE_TESTCASE(lockfilefd0or1, chert || glass) {
-#if !defined __WIN32__ && !defined __CYGWIN__ && !defined __OS2__
+#if !defined __WIN32__ && !defined __OS2__
     int old_stdin = dup(0);
     int old_stdout = dup(1);
     try {
@@ -1124,7 +1124,7 @@ DEFINE_TESTCASE(newfreelistblock1, writa
  *  from the database directory.
  */
 DEFINE_TESTCASE(readonlyparentdir1, chert || glass) {
-#if !defined __WIN32__ && !defined __CYGWIN__ && !defined __OS2__
+#if !defined __WIN32__ && !defined __OS2__
     string path = get_named_writable_database_path("readonlyparentdir1");
     // Fix permissions if the previous test was killed.
     (void)chmod(path.c_str(), 0700);
@@ -1296,7 +1296,7 @@ DEFINE_TESTCASE(retrylock1, writable &&
 
 // Opening a WritableDatabase with low fds available - it should avoid them.
 DEFINE_TESTCASE(dbfilefd012, chert || glass) {
-#if !defined __WIN32__ && !defined __CYGWIN__ && !defined __OS2__
+#if !defined __WIN32__ && !defined __OS2__
     int oldfds[3];
     for (int i = 0; i < 3; ++i) {
 	oldfds[i] = dup(i);
--- origsrc/xapian-core-1.4.5/xapian-config.in	2017-10-15 21:32:24.000000000 -0500
+++ src/xapian-core-1.4.5/xapian-config.in	2017-11-26 13:13:54.938270900 -0600
@@ -91,7 +91,7 @@ need_explicit_dependencies()
     # Vanilla libtool set this to either "yes" or "unknown" and then handles
     # both of these the same way, but our configure forces this to "no" on
     # platforms where we know that is appropriate.
-    [ no != "@link_all_deplibs_CXX@" ] || return 1 # "false"
+    [ no != "no" ] || return 1 # "false"
 
     return 0 # "true"
 }
