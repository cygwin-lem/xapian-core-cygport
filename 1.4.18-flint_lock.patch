--- origsrc/xapian-core-1.4.18/backends/flint_lock.cc	2021-01-14 09:44:16.000000000 +0900
+++ src/xapian-core-1.4.18/backends/flint_lock.cc
@@ -40,11 +40,6 @@
 #include "errno_to_string.h"
 #include "omassert.h"
 
-#ifdef __CYGWIN__
-# include <cygwin/version.h>
-# include <sys/cygwin.h>
-#endif
-
 #ifdef FLINTLOCK_USE_FLOCK
 # include <sys/file.h>
 #endif
@@ -77,7 +72,7 @@
     // A database which doesn't support update can't be locked for update.
     if (filename.empty()) return false;
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     if (hFile != INVALID_HANDLE_VALUE) return true;
     // Doesn't seem to be possible to check if the lock is held without briefly
     // taking the lock.
@@ -126,7 +121,7 @@
     // Currently we only support exclusive locks.
     (void)exclusive;
     Assert(exclusive);
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     Assert(hFile == INVALID_HANDLE_VALUE);
 #ifdef __CYGWIN__
     char fnm[MAX_PATH];
@@ -461,7 +456,7 @@
 
 void
 FlintLock::release() {
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     if (hFile == INVALID_HANDLE_VALUE) return;
     CloseHandle(hFile);
     hFile = INVALID_HANDLE_VALUE;
--- origsrc/xapian-core-1.4.18/backends/flint_lock.h	2021-01-14 09:44:16.000000000 +0900
+++ src/xapian-core-1.4.18/backends/flint_lock.h
@@ -28,7 +28,7 @@
 
 #include <string>
 
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 # include "safewindows.h"
 #else
 # include <sys/types.h>
@@ -38,7 +38,7 @@
 
 class FlintLock {
     std::string filename;
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
     HANDLE hFile = INVALID_HANDLE_VALUE;
 #elif defined FLINTLOCK_USE_FLOCK
     int fd = -1;
@@ -69,7 +69,7 @@
     FlintLock() {}
 
     operator bool() const {
-#if defined __CYGWIN__ || defined __WIN32__
+#if defined __WIN32__
 	return hFile != INVALID_HANDLE_VALUE;
 #else
 	return fd != -1;
